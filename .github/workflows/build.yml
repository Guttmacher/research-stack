name: Build and Test Container

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [base, base-nvim, base-nvim-vscode, base-nvim-vscode-tex, base-nvim-vscode-tex-pandoc, base-nvim-vscode-tex-pandoc-haskell, base-nvim-vscode-tex-pandoc-haskell-crossref, base-nvim-vscode-tex-pandoc-haskell-crossref-plus, full]
        platform: [linux/amd64, linux/arm64]
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=${{ matrix.target }}
        flavor: |
          suffix=-${{ matrix.target }}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.platform }}
        target: ${{ matrix.target }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cache:${{ matrix.target }}
        cache-to: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cache:${{ matrix.target }},mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Test container (amd64 only)
      if: matrix.platform == 'linux/amd64'
      run: |
        # Pull the built image for testing
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.target }}
        
        # Tag it locally for testing
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.target }} base-container:${{ matrix.target }}
        
        # Run stage-appropriate tests
        case "${{ matrix.target }}" in
          "base")
            docker run --rm base-container:${{ matrix.target }} bash -c "which zsh && R --version"
            ;;
          "base-nvim")
            docker run --rm base-container:${{ matrix.target }} bash -c "nvim --version && ls -la /home/me/.local/share/nvim/lazy/"
            ;;
          "base-nvim-vscode")
            docker run --rm base-container:${{ matrix.target }} bash -c "ls -la /home/me/.vscode-server/bin/"
            ;;
          "base-nvim-vscode-tex")
            docker run --rm base-container:${{ matrix.target }} bash -c "xelatex --version | head -n 1"
            ;;
          "base-nvim-vscode-tex-pandoc"|"base-nvim-vscode-tex-pandoc-haskell"|"base-nvim-vscode-tex-pandoc-haskell-crossref"|"base-nvim-vscode-tex-pandoc-haskell-crossref-plus")
            docker run --rm base-container:${{ matrix.target }} bash -c "pandoc --version | head -n 1"
            if [ "${{ matrix.target }}" = "base-nvim-vscode-tex-pandoc-haskell" ]; then
              docker run --rm base-container:${{ matrix.target }} bash -c "stack --version"
            fi
            if [ "${{ matrix.target }}" = "base-nvim-vscode-tex-pandoc-haskell-crossref" ]; then
              docker run --rm base-container:${{ matrix.target }} bash -c "pandoc-crossref --version"
            fi
            ;;
          "full")
            docker run --rm base-container:${{ matrix.target }} bash -c 'R -e "cat(\"Installed packages:\", length(.packages(all.available=TRUE)), \"\n\")"'
            ;;
        esac

  # Create multi-arch manifest for the full image
  create-manifest:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create and push multi-arch manifest
      run: |
        # Create manifest for the full image
        docker manifest create \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-full \
          --amend
        
        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Hadolint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
      - name: Install shellcheck and shfmt
        run: sudo apt-get update -qq && sudo apt-get install -y shellcheck shfmt
      - name: Shellcheck scripts
        run: |
          set -e
          find . -maxdepth 2 -type f -name "*.sh" -print0 | xargs -0 -r shellcheck -x
      - name: shfmt check
        run: |
          set -e
          shfmt -d .
