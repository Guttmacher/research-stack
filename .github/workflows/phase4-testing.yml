name: Phase 4 Testing and Validation

on:
  push:
    branches: [ main, phase4-testing-validation ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level (quick, standard, comprehensive)'
        required: false
        default: 'standard'
        type: choice
        options:
        - quick
        - standard
        - comprehensive

env:
  DOCKER_BUILDKIT: 1

jobs:
  test-pak-migration:
    name: Test Pak Migration
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    strategy:
      matrix:
        test-suite:
          - core-functionality
          - package-validation
          - regression-testing
        include:
          - test-suite: core-functionality
            script: "./test_suite_phase4.sh"
            config: "ENABLE_STRESS_TESTS=false ENABLE_MULTIARCH_TESTS=false"
          - test-suite: package-validation
            script: "Rscript test_package_validation.R"
            config: "--quick"
          - test-suite: regression-testing
            script: "./test_regression_comparison.sh"
            config: "--sample-size 15"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc jq r-base-core r-base-dev
          
      - name: Install R dependencies
        run: |
          sudo R -e "install.packages(c('pak', 'jsonlite'), repos='https://cloud.r-project.org/')"
          
      - name: Make test scripts executable
        run: |
          chmod +x test_suite_phase4.sh
          chmod +x test_build_performance.sh
          chmod +x test_regression_comparison.sh
          chmod +x test_package_validation.R
          
      - name: Set test configuration
        run: |
          case "${{ github.event.inputs.test_level || 'standard' }}" in
            quick)
              echo "TEST_CONFIG=--quick" >> $GITHUB_ENV
              echo "SAMPLE_SIZE=10" >> $GITHUB_ENV
              echo "ENABLE_PERFORMANCE_TESTS=false" >> $GITHUB_ENV
              ;;
            comprehensive)
              echo "TEST_CONFIG=--deep" >> $GITHUB_ENV
              echo "SAMPLE_SIZE=50" >> $GITHUB_ENV
              echo "ENABLE_PERFORMANCE_TESTS=true" >> $GITHUB_ENV
              echo "ENABLE_STRESS_TESTS=true" >> $GITHUB_ENV
              ;;
            *)
              echo "TEST_CONFIG=" >> $GITHUB_ENV
              echo "SAMPLE_SIZE=20" >> $GITHUB_ENV
              echo "ENABLE_PERFORMANCE_TESTS=true" >> $GITHUB_ENV
              ;;
          esac
          
      - name: Run test suite
        run: |
          case "${{ matrix.test-suite }}" in
            core-functionality)
              ${{ matrix.config }} ${{ matrix.script }} ${{ env.TEST_CONFIG }}
              ;;
            package-validation)
              ${{ matrix.script }} ${{ env.TEST_CONFIG }}
              ;;
            regression-testing)
              SAMPLE_SIZE=${{ env.SAMPLE_SIZE }} ${{ matrix.script }}
              ;;
          esac
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            test_results/
            package_validation_results/
            regression_test_results/
            build_performance_results/
          retention-days: 30
          
      - name: Generate test summary
        if: always()
        run: |
          echo "## Test Results Summary - ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Find the most recent test results
          LATEST_DIR=""
          for dir in test_results package_validation_results regression_test_results; do
            if [ -d "$dir" ]; then
              LATEST_SUBDIR=$(ls -1t "$dir" 2>/dev/null | head -1)
              if [ -n "$LATEST_SUBDIR" ] && [ -d "$dir/$LATEST_SUBDIR" ]; then
                LATEST_DIR="$dir/$LATEST_SUBDIR"
                break
              fi
            fi
          done
          
          if [ -n "$LATEST_DIR" ]; then
            echo "### Test Session: $(basename $LATEST_DIR)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Add summary from text files
            for summary_file in "$LATEST_DIR/reports"/*summary*.txt; do
              if [ -f "$summary_file" ]; then
                echo "#### $(basename $summary_file)" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                head -20 "$summary_file" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            # Add metrics from JSON files
            for metrics_file in "$LATEST_DIR/metrics"/*.json; do
              if [ -f "$metrics_file" ] && command -v jq >/dev/null; then
                echo "#### Metrics: $(basename $metrics_file .json)" >> $GITHUB_STEP_SUMMARY
                echo '```json' >> $GITHUB_STEP_SUMMARY
                jq -r 'to_entries | map("\(.key): \(.value)") | .[]' "$metrics_file" | head -10 >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "❌ No test results found" >> $GITHUB_STEP_SUMMARY
          fi

  build-performance-test:
    name: Build Performance Test
    runs-on: ubuntu-latest
    timeout-minutes: 90
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_level == 'comprehensive'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc jq
          
      - name: Make test scripts executable
        run: chmod +x test_build_performance.sh
        
      - name: Run build performance tests
        run: |
          ITERATIONS=3 ENABLE_CACHE_TESTS=true ./test_build_performance.sh
          
      - name: Upload build performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-performance-results
          path: build_performance_results/
          retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-pak-migration]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-test-results
          
      - name: Generate comprehensive summary
        run: |
          echo "# Phase 4 Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Matrix Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check test results
          TOTAL_TESTS=0
          PASSED_TESTS=0
          
          for result_dir in all-test-results/test-results-*; do
            if [ -d "$result_dir" ]; then
              TEST_NAME=$(basename "$result_dir" | sed 's/test-results-//')
              TOTAL_TESTS=$((TOTAL_TESTS + 1))
              
              # Look for success indicators in the results
              if find "$result_dir" -name "*.json" -exec grep -l '"success": true' {} \; | head -1 >/dev/null 2>&1; then
                echo "✅ $TEST_NAME: PASSED" >> $GITHUB_STEP_SUMMARY
                PASSED_TESTS=$((PASSED_TESTS + 1))
              else
                echo "❌ $TEST_NAME: FAILED" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Overall Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Test Suites**: $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed**: $PASSED_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed**: $((TOTAL_TESTS - PASSED_TESTS))" >> $GITHUB_STEP_SUMMARY
          
          if [ $PASSED_TESTS -eq $TOTAL_TESTS ]; then
            echo "- **Status**: ✅ ALL TESTS PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ❌ SOME TESTS FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review detailed test results in the artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Check individual test logs for failure details" >> $GITHUB_STEP_SUMMARY
          echo "- Refer to PHASE4_TESTING_README.md for interpretation guidelines" >> $GITHUB_STEP_SUMMARY