---
name: Build and Push Containers

# Workflow Overview (Phase 1 Documentation)
# This workflow builds and pushes two related container targets:
#   1. r-container      -> Contains R runtime + packages (smaller, faster to build, <= ~8GB RAM requirement)
#   2. full-container   -> Extends r-container with heavier toolchain (LaTeX, Pandoc, Neovim configs, etc.) and
#                          requires a Docker daemon with >=30GB RAM due to large layer assembly.
#
# Key Design Decisions:
# - Sequential builds: r-container first, then full-container to maximize layer reuse and reduce total build time.
# - Registry caching: Uses type=registry cache to persist large layers beyond the limitations of GitHub Actions cache.
# - Multi-architecture: Builds linux/amd64 and linux/arm64 without QEMU emulation (handled by Buildx on runners).
# - Memory-aware scheduling (Phase 0): Standard hosted runner for r-container; self-hosted large-memory runner for full-container.
# - Explicit tagging: Metadata action provides ref, PR, SHA, and 'latest' (only on default branch).
#
# Future Enhancements (Phase 5 â€“ intentionally NOT implemented now, but documented for education):
# - Security scanning (Trivy / Snyk)
# - Release automation + semantic versioning
# - Advanced deployment strategies / promotion pipelines
# - Additional performance telemetry
# These are described in a PR comment rather than implemented to avoid scope creep.

"on":
  push:
    branches: [main]
    paths:
      - 'Dockerfile'
      - 'build-container.sh'
      - 'R_packages.txt'
      - 'install_r_packages.sh'
      - 'r-shell-config'
      - 'dotfiles/**'
      - '.github/workflows/build-and-push.yml'
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/base-container

jobs:
  build-r-container:
    # Phase 0: r-container build fits within standard GitHub hosted runner memory (~7 GB usable for Docker)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Verify registry auth
        run: |
          set -euo pipefail
          echo "Listing repositories (expect success if auth OK)"
          echo "(Non-fatal if empty)"
          docker image ls | head -5

      - name: Generate metadata (r-container)
        id: meta_r
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push r-container
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          target: r-container
          push: true
          tags: >-
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:r-${{ steps.meta_r.outputs.version }}
          cache-from: >-
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-r
          cache-to: >-
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-r,mode=max
      - name: Sanity check r-container manifest
        run: |
          set -euo pipefail
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:r-${{ steps.meta_r.outputs.version }} > /dev/null
          echo "r-container multi-arch manifest present."

  build-full-container:
    # Phase 0: full-container requires >=30 GB RAM for Docker build (large layers, LaTeX + tooling install)
    # Assumption: a self-hosted runner labeled 'self-hosted, linux, x64, large' provides >=32 GB RAM.
    # If such a runner is not yet configured, this job will queue indefinitely; configure runner before merging.
    needs: build-r-container
    runs-on: [self-hosted, linux, x64, large]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Verify registry auth
        run: |
          set -euo pipefail
          docker image ls | head -5

      - name: Generate metadata (full-container)
        id: meta_full
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push full-container
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          target: full-container
          push: true
          tags: ${{ steps.meta_full.outputs.tags }}
          labels: ${{ steps.meta_full.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-r
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-full
          cache-to: >-
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-full,mode=max
      - name: Sanity check full-container latest tag (if default branch)
        if: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
        run: |
          set -euo pipefail
          # Pick one of the produced tags to validate presence (latest may not always be enabled)
          echo "Inspecting produced tags:"
          echo "${{ steps.meta_full.outputs.tags }}" | tr ' ' '\n' | head -5
          primary_tag=$(echo "${{ steps.meta_full.outputs.tags }}" | tr ' ' '\n' | head -1)
          echo "Validating manifest for $primary_tag"
          docker buildx imagetools inspect "$primary_tag" > /dev/null
          echo "Full-container manifest validated."
