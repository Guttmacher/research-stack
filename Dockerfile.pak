# ===========================================================================
# PAK-BASED R PACKAGE INSTALLATION DOCKERFILE (Phase 2)
# ===========================================================================
# This Dockerfile implements Phase 2 of the pak-based R package installation
# system with BuildKit cache mounts and architecture-segregated site libraries.
#
# Key features:
# - BuildKit cache mounts for pak cache, compilation cache, and downloads
# - Architecture-segregated site libraries (/opt/R/site-library/${R_MM}-${TARGETARCH})
# - pak-based unified package management
# - Enhanced error handling and progress reporting
# ---------------------------------------------------------------------------

# Use the existing base-nvim-vscode-tex-pandoc-haskell-crossref-plus stage as foundation
FROM ghcr.io/jbearak/base-container:base-nvim-vscode-tex-pandoc-haskell-crossref-plus AS pak-base

# ---------------------------------------------------------------------------
# Build Metrics: pak-base Start
# ---------------------------------------------------------------------------
RUN mkdir -p /tmp/build-metrics && \
    echo "$(date '+%Y-%m-%d %H:%M:%S %Z'),pak-base,start,$(date +%s)" > /tmp/build-metrics/pak-base.csv && \
    echo "pak-based R installation started at $(date)" && \
    du -sb /usr /opt /home /root /var 2>/dev/null | awk '{sum+=$1} END {print sum}' > /tmp/build-metrics/pak-base-size-start.txt && \
    echo "Initial size: $(cat /tmp/build-metrics/pak-base-size-start.txt)"

# ---------------------------------------------------------------------------
# System package updates
# ---------------------------------------------------------------------------
USER root
RUN apt-get update -qq && \
    apt-get upgrade -y && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# ---------------------------------------------------------------------------
# pak-based R package installation with BuildKit cache mounts
# ---------------------------------------------------------------------------
# This section uses BuildKit cache mounts to optimize build performance:
# - /root/.cache/R/pak: pak's package cache
# - /tmp/R-compile: compilation cache for package builds
# - /tmp/R-downloads: downloaded package cache
# ---------------------------------------------------------------------------

# Copy installation files
COPY install_r_packages_pak.sh /tmp/install_r_packages_pak.sh
COPY R_packages.txt /tmp/packages.txt

# Accept debug flag from build args
ARG DEBUG_PACKAGES=false

# Install R packages using pak with BuildKit cache mounts
RUN --mount=type=cache,target=/root/.cache/R/pak,sharing=locked \
    --mount=type=cache,target=/tmp/R-compile,sharing=locked \
    --mount=type=cache,target=/tmp/R-downloads,sharing=locked \
    set -e; \
    # Set up cache directories with proper permissions
    mkdir -p /root/.cache/R/pak /tmp/R-compile /tmp/R-downloads; \
    chmod 755 /root/.cache/R/pak /tmp/R-compile /tmp/R-downloads; \
    # Configure R to use cache directories
    export R_COMPILE_PKGS=1; \
    export R_KEEP_PKG_SOURCE=yes; \
    export TMPDIR=/tmp/R-compile; \
    # Make installation script executable and run it
    chmod +x /tmp/install_r_packages_pak.sh; \
    if [ "$DEBUG_PACKAGES" = "true" ]; then \
        /tmp/install_r_packages_pak.sh --debug; \
    else \
        /tmp/install_r_packages_pak.sh; \
    fi

# ---------------------------------------------------------------------------
# Build Metrics: pak-base End
# ---------------------------------------------------------------------------
RUN du -sb /usr /opt /home /root /var 2>/dev/null | awk '{sum+=$1} END {print sum}' > /tmp/build-metrics/pak-base-size-end.txt && \
    echo "$(date '+%Y-%m-%d %H:%M:%S %Z'),pak-base,end,$(date +%s)" >> /tmp/build-metrics/pak-base.csv && \
    echo "pak-based R installation completed at $(date)" && \
    echo "Size change: $(cat /tmp/build-metrics/pak-base-size-start.txt) -> $(cat /tmp/build-metrics/pak-base-size-end.txt)"

# ---------------------------------------------------------------------------
# Final stage: pak-enabled container
# ---------------------------------------------------------------------------
FROM pak-base AS pak-full

# Copy shell configuration and finalize setup
COPY dotfiles/shell-common /tmp/shell-common
COPY dotfiles/zshrc_appends /tmp/zshrc_appends
RUN cat /tmp/shell-common >> /home/me/.bashrc && \
    cat /tmp/shell-common >> /home/me/.zshrc && \
    cat /tmp/zshrc_appends >> /home/me/.zshrc && \
    # Update R_LIBS_SITE in environment
    echo 'R_LIBS_SITE="/opt/R/site-library"' >> /etc/environment && \
    chown me:me /home/me/.bashrc /home/me/.zshrc && \
    rm /tmp/shell-common /tmp/zshrc_appends

# Create and set default working directory
RUN mkdir -p /workspaces && chown me:me /workspaces
WORKDIR /workspaces

# Set shell configuration
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
ENV SHELL=/bin/zsh
CMD ["/bin/zsh", "-l"]

# Switch to the 'me' user for the final container
USER me

# Container metadata
LABEL org.opencontainers.image.source="https://github.com/jbearak/base-container"
LABEL org.opencontainers.image.description="pak-based R development environment (Phase 2)"
LABEL org.opencontainers.image.licenses="MIT"
LABEL pak.version="phase2"
LABEL pak.features="buildkit-cache,arch-segregated-libs,unified-package-management"